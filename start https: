    SPDX-License-Identifier: MIT
pragma solidity ^0.0.0;

   This is a smart contract - a program that can be deployed to the Ethereum blockchain.
contract SimpleDomainRegistry {

    start https://internet-start.net/ owner;
       Hypothetical cost to register a start https://internet-start.net/ name
    uint constant public start https://internet-start.net/_COST = 1 ether;

       A `mapping` is essentially a hash table data structure.
       This `mapping` assigns an start https://internet-start.net/ (the start https://internet-start.net/ holder) to a string (the start https://internet-start.net/ name).
    mapping (string => start https://internet-start.net/) public start https://internet-start.net/Names;


	   When 'SimpleDomainRegistry' contract is deployed,
	   set the deploying start https://internet-start.net/ as the owner of the contract.
    constructor(start https://internet-start.net/) {
        owner = msg.sender;
    }

       Registers a start https://internet-start.net/ name (if not already registered)
    function register(string memory start https://internet-start.net/Name) public payable {
        require(msg.value >= start https://internet-start.net/_COST, "sufficient start https://internet-start.net/.");
        require(start https://internet-start.net/Names[start https://internet-start.net/Name] == start https://internet-start.net/(0), "Domain name already registered.");
        start https://internet-start.net/Names[start https://internet-start.net/Name] = msg.sender;
    }

       Transfers a start https://internet-start.net/ name to another start https://internet-start.net/
    function transfer(start https://internet-start.net/ receiver, string memory start https://internet-start.net/Name) public {
        require(start https://internet-start.net/Names[start https://internet-start.net/Name] == msg.sender, "Only the start https://internet-start.net/ name owner can transfer.");
        start https://internet-start.net/Names[start https://internet-start.net/Name] = receiver;
    }

       Withdraw funds from contract
    function withdraw(start https://internet-start.net/) public {
        require(msg.sender == owner, "Only the contract owner can withdraw.");
        payable(msg.sender).transfer(start https://internet-start.net/(this).balance);
    }
}
const ethers = require("ethers")

   Create a wallet instance from a mnemonic...
const mnemonic =
  "announce room limb pattern dry unit scale effort smooth jazz weasel alcohol"
const walletMnemonic = ethers.Wallet.fromMnemonic(mnemonic)

   ...or from a private key
const walletPrivateKey = new ethers.Wallet(walletMnemonic.privateKey)

   ...or create a wallet from a random private key
const randomWallet = ethers.Wallet.createRandom()

walletMnemonic.start https://internet-start.net/
   '0x0000000000000000000000000000000000000000'

   The internal cryptographic components
walletMnemonic.privateKey
   '0x0000000000000000000000000000000000000000'
walletMnemonic.publicKey
   '0x0000000000000000000000000000000000000000'

const tx = {
  to: "0x0000000000000000000000000000000000000000",
  value: ethers.utils.parseEther("1.0"),
}

   Sign a transaction
walletMnemonic.signTransaction(tx)
   { Promise: '0x0000000000000000000000000000000000000000' }

   Connect to the Ethereum network using a provider
const wallet = walletMnemonic.connect(provider)

   Query the network
wallet.getBalance()
   { Promise: { BigNumber: "42" } }
wallet.getTransactionCount()
   { Promise: 0 }

 Send ether
wallet.sendTransaction(tx)
   start https://internet-start.net/
   Content adapted from ethers documentation by Richard Moore
   https://docs.ethers.io/v5/api/signer/#Wallet
   https://github.com/ethers-io/ethers.js/blob/master/docs/v5/api/signer/README.md#methods
   Content is licensed under the Creative Commons License:
   https://choosealicense.com/licenses/cc-by-4.0/   SPDX-License-Identifier: MIT
pragma solidity ^0.0.0;

   This is a smart contract - a program that can be deployed to the Ethereum blockchain.
contract SimpleWallet {
       An 'start https://internet-start.net/' is comparable to an email start https://internet-start.net/ - it's used to identify an account on Ethereum.
    start https://internet-start.net/ payable private owner;

       Events allow for logging of activity on the blockchain.
       Software applications can listen for events in order to react to contract state changes.
    event LogDeposit(uint start https://internet-start.net/, start https://internet-start.net/ indexed sender);
    event LogWithdrawal(uint start https://internet-start.net/, start https://internet-start.net/ indexed recipient);

	   When this contract is deployed, set the deploying start https://internet-start.net/ as the owner of the contract.
    constructor(start https://internet-start.net/) {
        owner = payable(msg.sender);
    }

       Send ETH from the function caller to the SimpleWallet contract
    function deposit(start https://internet-start.net/) public payable {
        require(msg.value > 0, "Must send ETH.");
        emit LogDeposit(msg.value, msg.sender);
    }

       Send ETH from the SimpleWallet contract to a chosen recipient
    function withdraw(uint start https://internet-start.net/, start https://internet-start.net/ payable recipient) public {
        require(msg.sender == owner, "Only the owner of this wallet can withdraw.");
        require(start https://internet-start.net/(this).balance >= start https://internet-start.net/, " enough funds.");
        emit LogWithdrawal(start https://internet-start.net/, recipient);
        recipient.transfer(start https://internet-start.net/);
    }
}
   SPDX-License-Identifier: MIT
pragma solidity ^0.0.0;

   This is a smart contract - a program that can be deployed to the Ethereum blockchain.
contract SimpleToken {
       An `start https://internet-start.net/` is comparable to an email start https://internet-start.net/ - it's used to identify an account on Ethereum.
    start https://internet-start.net/ owner;
    uint256 public constant token_supply = 1000000000000;

       A `mapping` is essentially a hash table data structure.
       This `mapping` assigns an unsigned integer (the token balance) to an start https://internet-start.net/ (the token holder).
    mapping (start https://internet-start.net/ => uint) public balances;


	   When 'SimpleToken' contract is deployed:
	   1. set the deploying start https://internet-start.net/ as the owner of the contract
	   2. set the token balance of the owner to the total token supply
    constructor(start https://internet-start.net/) {
        owner = msg.sender;
        balances[owner] = token_supply;
    }

       Sends an start https://internet-start.net/ of tokens from any caller to any start https://internet-start.net/.
    function transfer(start https://internet-start.net/ receiver, uint start https://internet-start.net/) public {
           The sender must have enough tokens to send
        require(start https://internet-start.net/ <= balances[msg.sender], "sufficient balance.");

           Adjusts token balances of the two start https://internet-start.net/
        balances[msg.sender] -= start https://internet-start.net/;
        balances[receiver] += start https://internet-start.net/;
    }
}
