{"version":3,"sources":["TreeBorder2.jpg","getEthereum.js","App.js","reportWebVitals.js","index.js"],"names":["getEthereum","a","document","readyState","Promise","resolve","setTimeout","window","ethereum","App","useState","account","setOwnerAccount","setChainID","setNetwork","contractAddress","setContractAddress","contract","setContract","customerAddress","setCustomerAddress","donorAddress","setDonorAddress","agreementValue","setAgreementValue","connected","connect","ndvi","set_ndvi","web3","Web3","provider","providers","HttpProvider","request","method","accounts","eth","getChainId","chain","net","getNetworkType","acc","console","log","address","map","_contract","Contract","BrightLink","abi","methods","defaultAccount","addNewCustomer","send","then","setBaseLine","_customerAddress","String","UpdateOracleData","settleAgreement","viewValueFromOracle","call","className","style","backgroundImage","background","backgroundPosition","backgroundSize","backgroundRepeat","width","height","position","right","bottom","color","href","display","justifyContent","alignItems","onClick","left","top","type","value","placeholder","onChange","e","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.16729381.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/TreeBorder2.e33638a7.jpg\";","export const getEthereum = async () => {\n\n    // event listener is not reliable\n    while (document.readyState !== \"complete\") {\n        await new Promise(resolve => setTimeout(resolve, 50))\n    }\n\n    return window.ethereum\n\n}\n","import React, {useEffect, useState} from 'react';\nimport \"./App.css\";\nimport Web3 from 'web3'\nimport background from \"./TreeBorder2.jpg\";\nimport BrightLink from './artifacts/contracts/BrightLink.json';\nimport map from \"./artifacts/deployments/map.json\";\nimport {getEthereum} from \"./getEthereum\"\n\n// uses functional component syntax\nfunction App(){\n\n  const [account, setOwnerAccount] = useState()\n  const [chainID, setChainID] = useState()\n  const [network, setNetwork] = useState()\n  const [contractAddress, setContractAddress] = useState()\n  const [contract, setContract] = useState()\n  const[customerAddress, setCustomerAddress] = useState()\n  const[donorAddress, setDonorAddress] = useState()\n  const [agreementValue, setAgreementValue] = useState()\n  const [connected, connect] = useState()\n  const[ndvi, set_ndvi] = useState()\n\n  \n  // loadBlockChain detects metamask account\n  // and network ID \n  async function loadBlockChain(){\n\n    const ethereum = await getEthereum()\n    let web3\n\n    if (ethereum) {\n        web3 = new Web3(ethereum)\n    } else if (window.web3) {\n        web3 = window.web3\n    } else {\n        const provider = new Web3.providers.HttpProvider(\n            \"http://127.0.0.1:8545\"\n        );\n        web3 = new Web3(provider)\n    }\n\n    \n\n    // // Try to enable accounts (connect metamask)\n    // const ethereum = await getEthereum()\n    const accounts = await ethereum.request({method:'eth_requestAccounts'})\n    const chain = await web3.eth.getChainId()\n    const net = await web3.eth.net.getNetworkType()\n\n    //const accounts = await web3.eth.getAccounts()\n    const acc = accounts[0]\n    console.log(\"connected account: \" + acc)\n\n    setNetwork(net)\n    setChainID(chain)\n    setOwnerAccount(acc)\n\n    var address = ''\n\n    if (chain =='1337'){\n      address = map[\"dev\"]['BrightLink'][0]\n    }\n    else if(chain == 42){\n      address = map[\"42\"]['BrightLink'][0]\n    }\n    else if(chain==3){\n      address = map[\"3\"]['BrightLink'][0]\n    }\n    else if(chain==4){\n       address = map[\"4\"]['BrightLink'][0]\n    }\n    else{\n      throw 'Please connect to a valid testnet'\n    }\n\n\n    setContractAddress(address)\n    const _contract = new web3.eth.Contract(BrightLink.abi, address, acc)\n    \n    setContract(_contract)\n    console.log(\"address: \" + address)\n    console.log(\"contract:  \" + _contract.methods)\n    console.log(\"chain: \" + chain)\n    console.log(\"contract successfully loaded\")\n    \n    set_ndvi(0)\n\n    if (account){\n      connect(true)\n\n    }\n\n    web3.eth.Contract.defaultAccount = account\n\n    return web3, contract, ethereum\n  }\n\n\n\n  async function AddNewCustomer(){\n\n    await contract.methods.addNewCustomer(customerAddress,donorAddress, agreementValue)\n      .send({'from':account})\n        .then(console.log(\"successfully added new customer\"))\n    \n    console.log(customerAddress)\n    console.log(donorAddress)\n    console.log(agreementValue)\n    console.log(typeof(contract))\n\n  }\n\n  async function setBaseLine(){\n    await contract.methods.setBaseLine(customerAddress)\n      .send({'from':account})\n        .then(console.log(\"initial data successfully obtained from oracle\"))\n  }\n\n  async function getNewData(){\n    let _customerAddress = String(customerAddress)\n    await contract.methods.UpdateOracleData(_customerAddress)\n      .send({'from':account})\n      console.log(\"updated data successfully obtained from oracle\")\n  }\n\n  async function settleAgreement(){\n    let _customerAddress = String(customerAddress)\n    await contract.methods.settleAgreement(_customerAddress)\n    .send({'from':account})\n    console.log(\"the contract has paid DAI to either the customer or donor\")\n\n  }\n  \n  async function viewNDVIdata(){\n    let a = await contract.methods.viewValueFromOracle().call()\n    set_ndvi(a)\n    \n  }\n\n  return (\n  \n    <div \n    className=\"App\" \n    style={{ backgroundImage: 'url(' + background + ')',\n    backgroundPosition: 'center',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    width: '100vw',\n    height: '100vh',\n  \n    }}>\n\n    <li style={{position:\"absolute\",right:5, bottom: 30, color: 'black'}}>\n    <a href=\"https://github.com/Yeti87803643/blockchain-developer-bootcamp-final-project\"><b>Documentation</b></a>\n    </li>\n\n    <br></br>\n    <li style={{display: 'flex', justifyContent:'center', alignItems:'center', color: 'black'}}>\n    <h1>BrightLink </h1>\n    </li>\n\n    <li style={{display: 'flex', justifyContent:'center', alignItems:'center', color: 'black'}}>\n    <h2>Incentivized urban greening validated by satellite data</h2>\n    </li>\n\n    <li style={{display: 'flex', justifyContent:'center', alignItems:'center', color: 'black'}}>\n    {<button onClick={loadBlockChain} > Connect Wallet</button>}\n    </li>\n      \n    <li style={{position:\"absolute\",left:5, top: 5, color: 'green'}}>\n    {connected? <p><b>CONNECTED!</b></p> : null}\n    </li>\n\n    <li style={{position:\"absolute\",left:5, top: 30, color: 'black'}}>\n    <p>Contract is deployed at:</p> <p>{contractAddress}</p>\n    </li>\n\n    <li style={{position:\"absolute\",left:5, top: 100, color: 'black'}}>\n    <p>Connected to account:</p><p>{account}</p>\n    </li>\n\n      \n    <br></br>\n    <br></br>\n\n    <li style={{display: 'flex', justifyContent:'center', alignItems:'center', color: 'black'}}>\n    <p><h3>Start new project </h3></p>\n    </li>\n\n    <li style={{display: 'flex', justifyContent:'center', alignItems:'center', color: 'black'}}>\n      <p>Customer (Ethereum address)&nbsp;&nbsp;&nbsp;&nbsp;</p>\n\n    <input \n      type=\"text\"\n      value={customerAddress}\n      placeholder=\"Set Customer Address\"\n      onChange={e => setCustomerAddress(e.target.value)} />\n      </li>\n\n    <li style={{display: 'flex', justifyContent:'center', alignItems:'center', color: 'black'}}>\n    <p>Donor (Ethereum address)&nbsp;&nbsp;&nbsp;&nbsp;</p>\n\n    <input \n        type=\"text\"\n        value={donorAddress}\n        placeholder=\"Set Donor Address\"\n        onChange={e => setDonorAddress(e.target.value)} />\n    </li>\n\n    <li style={{display: 'flex', justifyContent:'center', alignItems:'center', color: 'black'}}>\n    <p>Funding Value (Dai)&nbsp;&nbsp;&nbsp;&nbsp;</p>\n\n    <input\n      type=\"text\"\n      value={agreementValue}\n      placeholder=\"Set Funding Value\"\n      onChange={e => setAgreementValue(e.target.value)} />\n    </li>\n    <br></br>\n    <li style={{display: 'flex', justifyContent:'center', alignItems:'center', color: 'black'}}>\n    {<button onClick={AddNewCustomer}>CONFIRM</button>}\n    </li>\n\n    <br></br>\n    <br></br>\n\n    <li style={{display: 'flex', justifyContent:'center', alignItems:'center', color: 'black'}}>\n    <p><b>Query Satellite data</b></p>\n\n    </li>\n    <br></br>\n \n    <li style={{display: 'flex', justifyContent:'center', alignItems:'center', color: 'black'}}>\n    {<button onClick={setBaseLine}>Set Baseline</button>}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n    {<button onClick={getNewData}>Get Updated Data</button>}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n    {<button onClick={settleAgreement}>Request Payout</button>}\n    </li>\n\n    <li style={{display: 'flex', justifyContent:'center', alignItems:'center', color: 'black'}}>\n    {<button onClick={viewNDVIdata}>View NDVI data</button>}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<p> vegetation coverage: {ndvi} %</p>\n    </li>\n\n\n\n    </div>\n\n  );\n  }\n\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}